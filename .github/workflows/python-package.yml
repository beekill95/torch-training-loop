# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        include:
          - os: "windows-latest"
            python-version: "3.8"
          - os: "macos-latest"
            python-version: "3.8"

    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    # TODO:
    # We could cache poetry installation, but I don't like
    # having to manually manage cache invalidation.
    # - name: Load cached Poetry installation
    #   id: cached-poetry
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.local  # the path depends on the OS
    #     key: poetry-${{ runner.os }}-py-${{ matrix.python-version }}-0  # increment to reset cache
    # - name: Install Poetry Action
    #   # if: steps.cached-poetry.outputs.cache-hit != 'true'
    #   uses: snok/install-poetry@v1.3.4
    #   with:
    #     version: 1.5.1
    #     virtualenvs-create: true
    #     virtualenvs-in-project: true
    - name: Setup PDM
      uses: pdm-project/setup-pdm@v4
      with:
        python-version: ${{ matrix.python-version }}
        version: 2.12.2
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-py-${{ matrix.python-version }}-${{ hashFiles('**/pdm.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        pdm export -G dev --no-hashes > requirements.txt
        # Remove all nvidia dependencies & install torch-cpu version to reduce .venv folder size.
        if [ $OS_VAR = 'Linux' ]
        then
          mv requirements.txt requirements-temp.txt
          sed '/nvidia-/d' requirements-temp.txt \
            | sed -r 's/torch==[0-9].[0-9].[0-9]/&+cpu/' \
            | sed '1s/^/--extra-index-url https:\/\/download.pytorch.org\/whl\/cpu\n/' > requirements.txt
        fi

        pdm run install -r requirements.txt
      env:
        OS_VAR: ${{ runner.os }}
    - name: Install project
      run: pdm run pip install .
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      uses: nick-fields/retry@v2
      with:
        shell: bash
        timeout_minutes: 5
        command: pdm run pytest --reruns 5 --reruns-delay 1
        new_command_on_retry: pdm run pytest --reruns 5 --reruns-delay 1 --last-failed
        max_attempts: 5
