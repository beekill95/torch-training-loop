# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    # TODO:
    # We could cache poetry installation, but I don't like
    # having to manually manage cache invalidation.
    # - name: Load cached Poetry installation
    #   id: cached-poetry
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.local  # the path depends on the OS
    #     key: poetry-${{ runner.os }}-py-${{ matrix.python-version }}-0  # increment to reset cache
    - name: Install Poetry Action
      # if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1.3.4
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-py-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --only main,dev
    - name: Install project
      run: poetry install --no-interaction --only-root
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      uses: nick-fields/retry@v2
      with:
        shell: bash
        timeout_minutes: 5
        command: poetry run pytest --reruns 5 --reruns-delay 1
        new_command_on_retry: poetry run pytest --reruns 5 --reruns-delay 1 --last-failed
        max_attempts: 5
